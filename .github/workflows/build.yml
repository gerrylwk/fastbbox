name: Build

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

jobs:
  build_wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    timeout-minutes: 60
    strategy:
      matrix:
        os: [ubuntu-latest, ubuntu-22.04, windows-latest, macos-latest]

    steps:
    - uses: actions/checkout@v4

    # Set up QEMU for cross-platform builds (ARM64 on x86_64)
    - name: Set up QEMU
      if: runner.os == 'Linux'
      uses: docker/setup-qemu-action@v3
      with:
        platforms: arm64

    - name: Build wheels
      uses: pypa/cibuildwheel@v2.21.0
      env:
        # Build for Python 3.9+ (drop 3.8 for latest features, add 3.13)
        CIBW_BUILD: cp39-* cp310-* cp311-* cp312-* cp313-*
        # Skip 32-bit builds, PyPy, and musl builds for broader compatibility
        CIBW_SKIP: "*-win32 *-manylinux_i686 *-musllinux_* pp*"
        # Use latest manylinux images for better performance
        CIBW_MANYLINUX_X86_64_IMAGE: manylinux_2_28
        CIBW_MANYLINUX_AARCH64_IMAGE: manylinux_2_28
        # Install build dependencies with version pinning for reproducibility
        CIBW_BEFORE_BUILD: pip install --upgrade pip setuptools wheel && pip install "numpy>=1.21.0" "cython>=3.0.0"
        # Enhanced test command with more comprehensive testing
        CIBW_TEST_COMMAND: >
          python -c "
          import fastbbox; import numpy as np; 
          print('Testing fastbbox import...'); 
          a = np.array([[0, 0, 10, 10], [5, 5, 15, 15]], dtype=np.float32); 
          b = np.array([[0, 0, 10, 10]], dtype=np.float32);
          iou = fastbbox.bbox_overlaps(a, b);
          giou = fastbbox.generalized_iou(a, b);
          print('IoU test:', iou.shape, iou[0,0]);
          print('GIoU test:', giou.shape, giou[0,0]);
          print('All tests passed!')
          "
        # Linux specific - install latest compiler tools
        CIBW_BEFORE_ALL_LINUX: >
          yum update -y && 
          yum install -y gcc-c++ make cmake &&
          yum clean all
        # Windows specific - use latest delvewheel with better DLL handling
        CIBW_BEFORE_BUILD_WINDOWS: pip install --upgrade pip setuptools wheel delvewheel
        CIBW_REPAIR_WHEEL_COMMAND_WINDOWS: delvewheel repair --add-path . -w {dest_dir} {wheel}
        # macOS specific - build for both Intel and Apple Silicon with optimizations
        CIBW_ARCHS_MACOS: x86_64 arm64
        CIBW_ENVIRONMENT_MACOS: MACOSX_DEPLOYMENT_TARGET=10.15
        # Linux - build for both x86_64 and ARM64 (re-enabled with optimizations)
        CIBW_ARCHS_LINUX: x86_64 aarch64
        # Build settings for better performance
        CIBW_BUILD_VERBOSITY: 1
        # Free-threaded Python support (experimental)
        CIBW_PRERELEASE_PYTHONS: true

    - uses: actions/upload-artifact@v4
      with:
        name: wheels-${{ matrix.os }}
        path: ./wheelhouse/*.whl

  build_sdist:
    name: Build source distribution
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
    - uses: actions/checkout@v4

    - name: Build sdist
      run: pipx run build --sdist

    - uses: actions/upload-artifact@v4
      with:
        name: sdist
        path: dist/*.tar.gz

  upload_pypi:
    needs: [build_wheels, build_sdist]
    runs-on: ubuntu-latest
    timeout-minutes: 10
    # Upload to PyPI on every tag starting with 'v'
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    environment:
      name: pypi
      url: https://pypi.org/p/fastbbox
    permissions:
      id-token: write  # IMPORTANT: this permission is mandatory for trusted publishing
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: dist
        merge-multiple: true

    - name: Verify artifacts
      run: |
        ls -la dist/
        echo "Total files: $(ls dist/ | wc -l)"
        echo "Wheels: $(ls dist/*.whl | wc -l)"
        echo "Source: $(ls dist/*.tar.gz | wc -l)"

    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        # Use trusted publishing (no API token needed)
        # Configure at: https://pypi.org/manage/account/publishing/
        verbose: true
        print-hash: true

