name: Build

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

jobs:
  build_wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
    - uses: actions/checkout@v4

    - name: Build wheels
      uses: pypa/cibuildwheel@v2.21.0
      env:
        CIBW_BUILD: cp39-* cp310-* cp311-* cp312-*
        # Skip 32-bit, PyPy, and musl builds
        CIBW_SKIP: "*-win32 *-manylinux_i686 *-musllinux_* pp*"
        # Use modern manylinux_2_28 (default in v3.1+)
        CIBW_MANYLINUX_X86_64_IMAGE: manylinux_2_28
        CIBW_MANYLINUX_AARCH64_IMAGE: manylinux_2_28
        # Install build dependencies
        CIBW_BEFORE_BUILD: pip install numpy cython
        # Install compiler (fixed command)
        CIBW_BEFORE_ALL_LINUX: yum install -y gcc-c++
        # Windows-specific: Disable wheel repair for now
        CIBW_REPAIR_WHEEL_COMMAND_WINDOWS: ""
        # Simple test command
        CIBW_TEST_COMMAND: python -c "import fastbbox; print('âœ“ Import successful')"

    - uses: actions/upload-artifact@v4
      with:
        name: wheels-${{ matrix.os }}
        path: ./wheelhouse/*.whl

  build_sdist:
    name: Build source distribution
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Build sdist
      run: pipx run build --sdist

    - uses: actions/upload-artifact@v4
      with:
        name: sdist
        path: dist/*.tar.gz

  upload_pypi:
    needs: [build_wheels, build_sdist]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    environment:
      name: pypi
      url: https://pypi.org/p/fastbbox
    permissions:
      id-token: write
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: dist
        merge-multiple: true

    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1