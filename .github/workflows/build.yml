name: Build and publish

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

jobs:
  build_wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    timeout-minutes: 60
    strategy:
      matrix:
        os: [ubuntu-20.04, windows-latest, macos-latest]

    steps:
    - uses: actions/checkout@v4

    # Set up QEMU for cross-platform builds (ARM64 on x86_64)
    - name: Set up QEMU
      if: runner.os == 'Linux'
      uses: docker/setup-qemu-action@v3
      with:
        platforms: arm64

    - name: Build wheels
      uses: pypa/cibuildwheel@v2.17.0
      env:
        # Build for Python 3.8+
        CIBW_BUILD: cp38-* cp39-* cp310-* cp311-* cp312-*
        # Skip 32-bit builds, PyPy, and musl builds for broader compatibility
        CIBW_SKIP: "*-win32 *-manylinux_i686 *-musllinux_* pp*"
        # Use manylinux_2_17 (newer, smaller images) instead of manylinux2014
        CIBW_MANYLINUX_X86_64_IMAGE: manylinux_2_17
        CIBW_MANYLINUX_AARCH64_IMAGE: manylinux_2_17
        # Install build dependencies
        CIBW_BEFORE_BUILD: pip install numpy cython
        # Test command
        CIBW_TEST_COMMAND: python -c "import fastbbox; import numpy as np; a = np.array([[0, 0, 10, 10]], dtype=np.float32); print('Test passed:', fastbbox.bbox_overlaps(a, a))"
        # Linux specific - install compiler tools (simplified for manylinux_2_17)
        CIBW_BEFORE_ALL_LINUX: yum install -y gcc-c++
        # Windows specific - use delvewheel for better DLL handling
        CIBW_BEFORE_BUILD_WINDOWS: pip install delvewheel
        CIBW_REPAIR_WHEEL_COMMAND_WINDOWS: delvewheel repair -w {dest_dir} {wheel}
        # macOS specific - build for both Intel and Apple Silicon
        CIBW_ARCHS_MACOS: x86_64 arm64
        # Focus on x86_64 first, add ARM64 later if needed
        CIBW_ARCHS_LINUX: x86_64

    - uses: actions/upload-artifact@v4
      with:
        name: wheels-${{ matrix.os }}
        path: ./wheelhouse/*.whl

  build_sdist:
    name: Build source distribution
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Build sdist
      run: pipx run build --sdist

    - uses: actions/upload-artifact@v4
      with:
        name: sdist
        path: dist/*.tar.gz

  upload_pypi:
    needs: [build_wheels, build_sdist]
    runs-on: ubuntu-latest
    # Upload to PyPI on every tag starting with 'v'
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: dist
        merge-multiple: true

    - uses: pypa/gh-action-pypi-publish@v1.8.10
      with:
        user: __token__
        password: ${{ secrets.PYPI_API_TOKEN }}

